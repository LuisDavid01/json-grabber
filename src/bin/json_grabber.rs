use anyhow::Result;
use clap::Parser;
use colored::*;
use json_grabber::{
    config::{Config, Operation},
    json_grabber::Projector,
    opts::Opts,
};
fn main() -> Result<()> {
    println!(
        "{}",
        "
       __                       ______              __     __               
      â•± â•±_____ ____   ____     â•± ____â•±_____ ______ â•± â•±_   / â•±_   ____  _____
 __  â•± â•±â•± ___â•±â•± __ â•² â•± __ â•²   â•± â•± __ â•± ___â•±â•± __ `â•±â•± __ â•² â•± __ â•² â•± __/ / ___â•±
â•± â•±_â•± â•±(__  )â•± â•±_â•± â•±â•± â•± â•± â•±  â•± â•±_â•± â•±â•± â•±   â•± â•±_â•± â•±â•± â•±_â•± â•±â•± â•±_â•± â•±â•±  __â•±â•± â•±    
â•²____â•±â•±____â•± â•²____â•±â•±_â•± â•±_â•±   â•²____â•±â•±_â•±    â•²____â•±â•±_____â•±â•±_____â•± â•²___â•±â•±_â•±
"
        .bright_cyan()
    );
    println!(
        "{} {} {}",
        "Json grabber".bright_green().bold(),
        "v0.1.0".bright_yellow(),
        "Remember important variables from your terminal ðŸ¦€\n".bright_white(),
    );
    let config: Config = Opts::parse().try_into()?;

    let mut proj = Projector::from_config(config.config, config.pwd);

    match config.operation {
        Operation::Print(None) => {
            let value = proj.get_value_all();
            let value = serde_json::to_string(&value)?;
            println!("{}", value);
        }
        Operation::Print(Some(k)) => {
            proj.get_value(&k).map(|x| {
                println!("{}", x);
            });
        }
        Operation::Add(k, v) => {
            proj.set_value(k, v);
            proj.save()?;
        }
        Operation::Remove(k) => {
            proj.remove_value(&k);
            proj.save()?;
        }
    }

    return Ok(());
}
